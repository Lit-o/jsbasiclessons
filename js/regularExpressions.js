'use strict';

// удобная работа со строками - удалять, 
// заменять части слов, искать части слов, ограничивать введение знаков
// состоит из двух частей - 1) паттерн/шаблон; 2) флаги

// new RegExp('pattern', 'flags'); классический синтаксис - не используется
//  /pattern/f - укороченный синтаксис

const ans = 'Ann';
const reg = /n/;
console.log(ans.search(reg));


const ans2 = 'ANn';
const reg2 = /n/ig;
// классические 3 флага i - отменяем зависимость от регистра, g - ищем несколько вхождений, m - многострочный режим
// метод .search() ишет только 1 символ, g - не будет работать
// флаги можно комбинировать - /n/ig
console.log(ans2.search(reg2));
// метод match() к строкам, без флага g работает как search, но возвращает особый массив
console.log(ans2.match(reg2));


const pass = ('Password...');
console.log(pass.replace(/\./g, '*'));
// replase(первый параметр что мы меняем, второй параметр на что мы меняем)
// в первый параметр можно записать регулярное выражение 
// /./g - берем всю строку, . - это взять всю строку, 
// если взять нужно именно точку, то в шаблоне нужно экранировать ее обратным слешем \.
console.log('12-02-2222'.replace(/-/g, ':'));
console.log('12-02-2222'.replace(/-/g, '')); // удаляем


const ans3 = 'AnnUT';
const reg3 = /q/ig;
console.log(reg3.test(ans3));
// .test() - метод именно для регулярного выражения вернет true если совпадения есть

// в регулярных выражениях есть классы - ищем по какому-то общему принципу
// \d - значит ищем цифры
// \w - ищем все буквы
// \s - ищем все пробелы (пробелы можно искать просто поставив пробел / /)

const ans4 = '200px';
const reg4 = /\d/ig;
console.log(ans4.match(reg4).reduce((s,c) => s +'-'+ c));


const starWars = 'My name is R2D2';
console.log(starWars.match(/\w\d\w\d/i));
console.log(starWars.match(/\d/ig));
console.log(starWars.match(/\W/ig));
console.log(starWars.match(/\D/ig));
// Синтаксис НЕ передается большой буквой W - Это найти все НЕ буквы и тп, 
// все цифры в этом режиме тоже видит как буквы


const test = '200px'
console.log(test.replace(/\D/g, ''));
// удаляем все буквы, оставим только 200










